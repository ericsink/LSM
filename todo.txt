
lz4

tool to find closures, or nested functions that could be
moved outside

still lots of automerge issues

opencursor issues, info for optimistic merge

more test cases

try to improve the performance of multicursor

write a value stream that doesn't know its length

page level encryption

need to actually design the file header
checksums for data integrity

bloom filters?

do we need IDatabase if there is only one implementation
of it?  same for IWriteLock.

--

experiment with inline for certain functions

consider nessos streams instead of seq<kvp> ?

need something to make sure that only one Database object
exists for a given file

do we have a test that chains multicursors with other multicursors?

#if integrity_checks

yeah, ICursor is really close to seq anyway.  next would return a bool.
current would return the tuple pair.  first() would just be the
initial call to movenext.  last(), prev(), seek() aren't there.

OpenCursor for idictionary -- sort the keys and then
create a memory btree?  or copy the dictionary (so the
values don't change) and just keep them both?

it would be nice to have an in-memory data structure
that has the functionality needed for an icursor.
sorted keys, with the ability to specify the comparer.

dictionary won't work because it's not sorted.

map won't work because it only sorts the way it wants.

sorteddictionary is (1) not immutable and (2) not WinRT
bcl.

can we have a readonly byte array?

wrap a ReadOnlyDictionary the way we wrap a dictionary now?
problem is that ROD is designed for cases where you want to
pass it to somebody else knowing that they won't modify
it.  what we care about is receiving it and knowing that
the originator will not modify it.  not quite the same.

ImmutableSortedDictionary from System.Collections.Immutable.
This one could wrap as an ICursor without problems I think.
Assuming the comparer is right.

look at ExtCore.HashMap

look at reducing memory allocations in writeLeaves

write a test that verifies that BTreeSegment.Create
never seeks if it has no boundary.  need a stream
that overrides seek and throws.  this test preserves
the ability to write a btree into almost any kind of
stream.  common use case remains writing with an
involved page manager.

--------

test multicursor with the same cursor twice?

test multicursor with two identical subs?

--------

still concerned about how much we are copying byte[] for keys

what are the embedded pointers in the runs in SQLite4 LSM?

tombstones shouldn't need a length field as well.
but the absence would mess up the space_needed calcs.
and if the length is always zero, it's just a byte.

--------

once "on disk", a segment is immutable.  reads only.
only the first (in-memory) segment needs to support writes.

--------

can we write an overflow without knowing its length in
advance?  that would be handy.  maybe we could chain a
zlib stream and compress as it goes in.  but how do we
set the skip field?  we pretty much can't.  I suppose we
could just write the whole thing and then go back and
write the skip field.

we can't do calculations on whether a value will fit if
we don't know its length.  such a value automatically
becomes an overflow.  after we write the overflow, then
we know its length.

--------

create shorter synthetic keys in the parent nodes?


